# AlertManager configuration for Telegram Bot Platform

global:
  smtp_smarthost: '${SMTP_HOST}:${SMTP_PORT}'
  smtp_from: '${ALERT_EMAIL_FROM}'
  smtp_auth_username: '${SMTP_USERNAME}'
  smtp_auth_password: '${SMTP_PASSWORD}'
  smtp_require_tls: true

# Define templates for notifications
templates:
  - '/etc/alertmanager/templates/*.tmpl'

# Routing configuration
route:
  group_by: ['alertname', 'cluster', 'service']
  group_wait: 30s
  group_interval: 5m
  repeat_interval: 12h
  receiver: 'default'
  routes:
    # Critical alerts go to multiple channels
    - match:
        severity: critical
      receiver: 'critical-alerts'
      group_wait: 10s
      repeat_interval: 5m
    
    # Infrastructure alerts
    - match:
        team: infrastructure
      receiver: 'infrastructure-team'
    
    # Backend application alerts
    - match:
        team: backend
      receiver: 'backend-team'
    
    # Database alerts
    - match:
        team: database
      receiver: 'database-team'
    
    # Business alerts
    - match:
        team: business
      receiver: 'business-team'

# Inhibition rules to prevent spam
inhibit_rules:
  # Inhibit warning alerts if critical alert is firing
  - source_match:
      severity: 'critical'
    target_match:
      severity: 'warning'
    equal: ['alertname', 'instance']
  
  # Inhibit individual service alerts if the whole instance is down
  - source_match:
      alertname: 'ServiceDown'
    target_match_re:
      alertname: '(HighCPUUsage|HighMemoryUsage|DatabaseConnectionIssues)'
    equal: ['instance']

receivers:
  # Default receiver
  - name: 'default'
    email_configs:
      - to: '${DEFAULT_ALERT_EMAIL}'
        subject: '[ALERT] {{ .GroupLabels.alertname }} - {{ .Status | toUpper }}'
        body: |
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Labels: {{ range .Labels.SortedPairs }}{{ .Name }}={{ .Value }} {{ end }}
          {{ end }}

  # Critical alerts - multiple channels
  - name: 'critical-alerts'
    email_configs:
      - to: '${CRITICAL_ALERT_EMAIL}'
        subject: '[CRITICAL] {{ .GroupLabels.alertname }} - IMMEDIATE ACTION REQUIRED'
        body: |
          ðŸš¨ CRITICAL ALERT ðŸš¨
          
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Severity: {{ .Labels.severity }}
          Time: {{ .StartsAt.Format "2006-01-02 15:04:05" }}
          Labels: {{ range .Labels.SortedPairs }}{{ .Name }}={{ .Value }} {{ end }}
          {{ if .Annotations.runbook_url }}
          Runbook: {{ .Annotations.runbook_url }}
          {{ end }}
          {{ end }}
    
    # Slack webhook for critical alerts
    slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL}'
        channel: '#critical-alerts'
        title: 'ðŸš¨ Critical Alert: {{ .GroupLabels.alertname }}'
        text: |
          {{ range .Alerts }}
          *{{ .Annotations.summary }}*
          {{ .Annotations.description }}
          
          *Labels:* {{ range .Labels.SortedPairs }}`{{ .Name }}={{ .Value }}` {{ end }}
          {{ if .Annotations.runbook_url }}
          *Runbook:* {{ .Annotations.runbook_url }}
          {{ end }}
          {{ end }}
        color: 'danger'

  # Infrastructure team
  - name: 'infrastructure-team'
    email_configs:
      - to: '${INFRASTRUCTURE_TEAM_EMAIL}'
        subject: '[INFRA] {{ .GroupLabels.alertname }} - {{ .Status | toUpper }}'
        body: |
          Infrastructure Alert
          
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Instance: {{ .Labels.instance }}
          Time: {{ .StartsAt.Format "2006-01-02 15:04:05" }}
          {{ end }}

  # Backend team
  - name: 'backend-team'
    email_configs:
      - to: '${BACKEND_TEAM_EMAIL}'
        subject: '[BACKEND] {{ .GroupLabels.alertname }} - {{ .Status | toUpper }}'
        body: |
          Backend Application Alert
          
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Service: {{ .Labels.job }}
          Time: {{ .StartsAt.Format "2006-01-02 15:04:05" }}
          {{ end }}

  # Database team
  - name: 'database-team'
    email_configs:
      - to: '${DATABASE_TEAM_EMAIL}'
        subject: '[DATABASE] {{ .GroupLabels.alertname }} - {{ .Status | toUpper }}'
        body: |
          Database Alert
          
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Database: {{ .Labels.instance }}
          Time: {{ .StartsAt.Format "2006-01-02 15:04:05" }}
          {{ end }}

  # Business team
  - name: 'business-team'
    email_configs:
      - to: '${BUSINESS_TEAM_EMAIL}'
        subject: '[BUSINESS] {{ .GroupLabels.alertname }} - {{ .Status | toUpper }}'
        body: |
          Business Metrics Alert
          
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Time: {{ .StartsAt.Format "2006-01-02 15:04:05" }}
          {{ end }}