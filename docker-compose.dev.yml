version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: telegram-bot-platform-db-dev
    environment:
      POSTGRES_DB: telegram_bot_platform_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./backend/database/init-prod.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d telegram_bot_platform_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: telegram-bot-platform-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: telegram-bot-platform-backend-dev
    ports:
      - "3001:3001"
      - "9229:9229"  # Debug port
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=telegram_bot_platform_dev
      - DB_USER=postgres
      - DB_PASSWORD=password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=dev-jwt-secret-key-change-in-production
      - JWT_REFRESH_SECRET=dev-refresh-secret-key-change-in-production
      - EMAIL_HOST=smtp.gmail.com
      - EMAIL_PORT=587
      - EMAIL_USER=test@example.com
      - EMAIL_PASS=test-password
      - TELEGRAM_BOT_TOKEN=your-dev-bot-token
      - LOG_LEVEL=debug
      - PORT=3001
    volumes:
      - ./backend/src:/app/src:ro
      - ./backend/logs:/app/logs
      - ./backend/uploads:/app/uploads
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    command: npm run dev

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: telegram-bot-platform-frontend-dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:3001
      - NEXT_PUBLIC_APP_URL=http://localhost:3000
      - NEXT_TELEMETRY_DISABLED=1
      - WATCHPACK_POLLING=true
    volumes:
      - ./frontend/src:/app/src:ro
      - ./frontend/public:/app/public:ro
      - ./frontend/styles:/app/styles:ro
      - ./frontend/pages:/app/pages:ro
      - ./frontend/components:/app/components:ro
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped
    command: npm run dev

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local

networks:
  app-network:
    driver: bridge